import os
import shutil
import yaml
import datetime
from git import Repo
from github import Github
from dotenv import load_dotenv

load_dotenv()  # read .env file

# üîß github config
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
REPO_URL = "https://{}@github.com/shinshawcs/facenet_model_pipeline.git".format(GITHUB_TOKEN)
REPO_NAME = "shinshawcs/facenet_model_pipeline"
LOCAL_CLONE_PATH = "/home/egatech2017/airflow/tmp/facenet_model_repo"
NEW_MODEL_PT = "/home/egatech2017/airflow/models/facenet_model_dynamic_quantized.pth"
NEW_MODEL_ONNX = "/home/egatech2017/airflow/models/facenet_model_dynamic_quantized.onnx"
SCRIPTS_DIR = "/home/egatech2017/airflow/scripts"  # add scripts directory path

BRANCH_NAME = "dev-facenet-model-gcp"
MODEL_VERSION = "v1"

def main():
    # Step 1: Clone repo
    if os.path.exists(LOCAL_CLONE_PATH):
        shutil.rmtree(LOCAL_CLONE_PATH)
    repo = Repo.clone_from(REPO_URL, LOCAL_CLONE_PATH)

    # Check if remote branch exists
    origin = repo.remote(name="origin")
    origin.fetch()  # fetch all remote branches
    remote_branches = [ref.name for ref in repo.remote().refs]
    branch_exists = f"origin/{BRANCH_NAME}" in remote_branches

    if branch_exists:
        print(f"‚úÖ Branch {BRANCH_NAME} exists, updating it")
        repo.git.checkout(BRANCH_NAME)
    else:
        print(f"üÜï Creating new branch {BRANCH_NAME}")
        # Create new branch from main
        repo.git.checkout("main")
        repo.git.checkout("-b", BRANCH_NAME)

    # Step 2: update model
    model_dir = os.path.join(LOCAL_CLONE_PATH, "models")
    os.makedirs(model_dir, exist_ok=True)
    shutil.copy(NEW_MODEL_PT, os.path.join(model_dir, "facenet_model_dynamic_quantized.pth"))
    shutil.copy(NEW_MODEL_ONNX, os.path.join(model_dir, "facenet_model_dynamic_quantized.onnx"))

    # Step 2.1: Copy all scripts
    target_scripts_dir = os.path.join(LOCAL_CLONE_PATH, "scripts")
    os.makedirs(target_scripts_dir, exist_ok=True)
    for script_file in os.listdir(SCRIPTS_DIR):
        if script_file.endswith('.py'):  # only copy Python files
            source_file = os.path.join(SCRIPTS_DIR, script_file)
            target_file = os.path.join(target_scripts_dir, script_file)
            shutil.copy2(source_file, target_file)
            print(f"‚úÖ Copied {script_file} to repo")

    # Step 3: update config.yaml
    config_path = os.path.join(LOCAL_CLONE_PATH, "config.yaml")
    if not os.path.exists(config_path):
        config = {
            "model": {
                "version": MODEL_VERSION,
                "path": "models/facenet_model_dynamic_quantized.pth",
                "onnx_path": "models/facenet_model_dynamic_quantized.onnx"
            },
            "inference": {
                "batch_size": 1,
                "device": "cpu",
                "num_workers": 4
            }
        }
    else:
        # if file exists, read existing config
        with open(config_path, "r") as f:
            config = yaml.safe_load(f)
            
        # update model related config
        if "model" not in config:
            config["model"] = {}
        config["model"]["version"] = MODEL_VERSION
        config["model"]["path"] = "models/facenet_model_dynamic_quantized.pth"
        config["model"]["onnx_path"] = "models/facenet_model_dynamic_quantized.onnx"

    with open(config_path, "w") as f:
        yaml.dump(config, f)

    # Step 4: commit and push to dev-facenet-model branch
    repo.git.add(all=True)
    repo.index.commit("üöÄ Auto-update facenet model")
    origin = repo.remote(name="origin")
    try:
        origin.push(refspec=f"{BRANCH_NAME}:{BRANCH_NAME}")
    except:
        # If push fails, force push
        origin.push(refspec=f"{BRANCH_NAME}:{BRANCH_NAME}", force=True)

    print(f"‚úÖ Pushed branch {BRANCH_NAME}")

    # Step 5: create PR
    gh = Github(GITHUB_TOKEN)
    gh_repo = gh.get_repo(REPO_NAME)
    open_prs = list(gh_repo.get_pulls(state="open", head=f"shinshawcs:{BRANCH_NAME}"))
    if not open_prs:
        pr = gh_repo.create_pull(
            title=f"ü§ñ Update model {MODEL_VERSION}",
            body="Auto-generated by Airflow deployment pipeline.",
            head=BRANCH_NAME,
            base="main"
        )
        print(f"‚úÖ PR created: {pr.html_url}")
    else:
        print("üîÅ PR already exists. Skipping creation.")

if __name__ == "__main__":
    main()